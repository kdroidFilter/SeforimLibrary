-- Categories table
CREATE TABLE IF NOT EXISTS category (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    parentId INTEGER,
    title TEXT NOT NULL,
    level INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (parentId) REFERENCES category(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_category_parent ON category(parentId);

-- Authors table
CREATE TABLE IF NOT EXISTS author (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

CREATE INDEX IF NOT EXISTS idx_author_name ON author(name);

-- Table des topics
CREATE TABLE IF NOT EXISTS topic (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

CREATE INDEX IF NOT EXISTS idx_topic_name ON topic(name);

-- Publication places table
CREATE TABLE IF NOT EXISTS pub_place (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

CREATE INDEX IF NOT EXISTS idx_pub_place_name ON pub_place(name);

-- Publication dates table
CREATE TABLE IF NOT EXISTS pub_date (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT NOT NULL UNIQUE
);

CREATE INDEX IF NOT EXISTS idx_pub_date_date ON pub_date(date);

-- Books table
CREATE TABLE IF NOT EXISTS book (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    categoryId INTEGER NOT NULL,
    title TEXT NOT NULL,
    heShortDesc TEXT,
    orderIndex INTEGER NOT NULL DEFAULT 999,
    totalLines INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (categoryId) REFERENCES category(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_book_category ON book(categoryId);
CREATE INDEX IF NOT EXISTS idx_book_title ON book(title);
CREATE INDEX IF NOT EXISTS idx_book_order ON book(orderIndex);

-- Book-publication place junction table
CREATE TABLE IF NOT EXISTS book_pub_place (
    bookId INTEGER NOT NULL,
    pubPlaceId INTEGER NOT NULL,
    PRIMARY KEY (bookId, pubPlaceId),
    FOREIGN KEY (bookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (pubPlaceId) REFERENCES pub_place(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_book_pub_place_book ON book_pub_place(bookId);
CREATE INDEX IF NOT EXISTS idx_book_pub_place_place ON book_pub_place(pubPlaceId);

-- Book-publication date junction table
CREATE TABLE IF NOT EXISTS book_pub_date (
    bookId INTEGER NOT NULL,
    pubDateId INTEGER NOT NULL,
    PRIMARY KEY (bookId, pubDateId),
    FOREIGN KEY (bookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (pubDateId) REFERENCES pub_date(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_book_pub_date_book ON book_pub_date(bookId);
CREATE INDEX IF NOT EXISTS idx_book_pub_date_date ON book_pub_date(pubDateId);

-- Book-topic junction table
CREATE TABLE IF NOT EXISTS book_topic (
    bookId INTEGER NOT NULL,
    topicId INTEGER NOT NULL,
    PRIMARY KEY (bookId, topicId),
    FOREIGN KEY (bookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (topicId) REFERENCES topic(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_book_topic_book ON book_topic(bookId);
CREATE INDEX IF NOT EXISTS idx_book_topic_topic ON book_topic(topicId);

-- Book-author junction table
CREATE TABLE IF NOT EXISTS book_author (
    bookId INTEGER NOT NULL,
    authorId INTEGER NOT NULL,
    PRIMARY KEY (bookId, authorId),
    FOREIGN KEY (bookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (authorId) REFERENCES author(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_book_author_book ON book_author(bookId);
CREATE INDEX IF NOT EXISTS idx_book_author_author ON book_author(authorId);

-- Lines table
CREATE TABLE IF NOT EXISTS line (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    bookId INTEGER NOT NULL,
    lineIndex INTEGER NOT NULL,
    content TEXT NOT NULL,
    plainText TEXT NOT NULL,
    tocEntryId INTEGER,
    FOREIGN KEY (bookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (tocEntryId) REFERENCES tocEntry(id) ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS idx_line_book_index ON line(bookId, lineIndex);
CREATE INDEX IF NOT EXISTS idx_line_toc ON line(tocEntryId);

-- TOC texts table
CREATE TABLE IF NOT EXISTS tocText (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT NOT NULL UNIQUE
);

CREATE INDEX IF NOT EXISTS idx_toc_text ON tocText(text);
CREATE INDEX IF NOT EXISTS idx_toctext_text_length ON tocText(text, length(text));

-- TOC entries table
CREATE TABLE IF NOT EXISTS tocEntry (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    bookId INTEGER NOT NULL,
    parentId INTEGER,
    textId INTEGER NOT NULL,
    level INTEGER NOT NULL,
    lineId INTEGER,
    FOREIGN KEY (bookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (parentId) REFERENCES tocEntry(id) ON DELETE CASCADE,
    FOREIGN KEY (textId) REFERENCES tocText(id) ON DELETE CASCADE,
    FOREIGN KEY (lineId) REFERENCES line(id) ON DELETE SET NULL
);

CREATE INDEX IF NOT EXISTS idx_toc_book ON tocEntry(bookId);
CREATE INDEX IF NOT EXISTS idx_toc_parent ON tocEntry(parentId);
CREATE INDEX IF NOT EXISTS idx_toc_text_id ON tocEntry(textId);
CREATE INDEX IF NOT EXISTS idx_toc_line ON tocEntry(lineId);
CREATE INDEX IF NOT EXISTS idx_tocentry_text_level ON tocEntry(textId, level);
CREATE INDEX IF NOT EXISTS idx_tocentry_level_book ON tocEntry(level, bookId);

-- Connection types table
CREATE TABLE IF NOT EXISTS connection_type (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);

CREATE INDEX IF NOT EXISTS idx_connection_type_name ON connection_type(name);

-- Links table
CREATE TABLE IF NOT EXISTS link (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sourceBookId INTEGER NOT NULL,
    targetBookId INTEGER NOT NULL,
    sourceLineId INTEGER NOT NULL,
    targetLineId INTEGER NOT NULL,
    connectionTypeId INTEGER NOT NULL,
    FOREIGN KEY (sourceBookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (targetBookId) REFERENCES book(id) ON DELETE CASCADE,
    FOREIGN KEY (sourceLineId) REFERENCES line(id) ON DELETE CASCADE,
    FOREIGN KEY (targetLineId) REFERENCES line(id) ON DELETE CASCADE,
    FOREIGN KEY (connectionTypeId) REFERENCES connection_type(id) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_link_source_book ON link(sourceBookId);
CREATE INDEX IF NOT EXISTS idx_link_source_line ON link(sourceLineId);
CREATE INDEX IF NOT EXISTS idx_link_target_book ON link(targetBookId);
CREATE INDEX IF NOT EXISTS idx_link_target_line ON link(targetLineId);
CREATE INDEX IF NOT EXISTS idx_link_type ON link(connectionTypeId);

-- View for FTS5 content source that includes book title
CREATE VIEW IF NOT EXISTS line_with_book_title AS
SELECT 
    l.id,
    l.bookId,
    l.lineIndex,
    b.title AS bookTitle,
    l.plainText
FROM line l
JOIN book b ON l.bookId = b.id;

-- FTS5 virtual table for line search using external content
CREATE VIRTUAL TABLE IF NOT EXISTS line_search USING fts5(
    bookId INTEGER UNINDEXED,
    id INTEGER UNINDEXED,
    lineIndex INTEGER UNINDEXED,
    bookTitle TEXT UNINDEXED,
    plainText TEXT,
    content='line_with_book_title',
    content_rowid='id'
);
